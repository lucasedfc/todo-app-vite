(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))d(n);new MutationObserver(n=>{for(const l of n)if(l.type==="childList")for(const m of l.addedNodes)m.tagName==="LINK"&&m.rel==="modulepreload"&&d(m)}).observe(document,{childList:!0,subtree:!0});function o(n){const l={};return n.integrity&&(l.integrity=n.integrity),n.referrerpolicy&&(l.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?l.credentials="include":n.crossorigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function d(n){if(n.ep)return;n.ep=!0;const l=o(n);fetch(n.href,l)}})();const c=document.querySelector(".todo-list"),r=document.querySelector(".new-todo"),g=document.querySelector(".clear-completed"),y=document.querySelector(".filters"),f=document.querySelectorAll(".filter"),L=document.querySelector(".todo-count"),h=t=>{const e=`
                    <li class="${t.completed?"completed":""}" data-id="${t.id}">
						<div class="view">
							<input class="toggle" type="checkbox" ${t.completed?"checked":""}>
							<label>${t.task}</label>
							<button class="destroy"></button>
						</div>
						<input class="edit" value="Create a TodoMVC template">
					</li>`,o=document.createElement("div");return o.innerHTML=e,c.append(o.firstElementChild),o.firstElementChild};r.addEventListener("keyup",t=>{if(t.keyCode===13&&r.value.length>0){const e=new u(r.value);i.addTodo(e),h(e),r.value=""}});c.addEventListener("click",t=>{const e=t.target.localName,o=t.target.parentElement.parentElement,d=o.getAttribute("data-id");e.includes("input")?(i.toggleTodo(d),o.classList.toggle("completed")):e.includes("button")&&(i.deleteTodo(d),c.removeChild(o))});g.addEventListener("click",()=>{i.deleteCompleted();for(let t=c.children.length-1;t>=0;t--){const e=c.children[t];e.classList.contains("completed")&&c.removeChild(e)}});y.addEventListener("click",t=>{const e=t.target.text;if(!!e){f.forEach(o=>{o.classList.remove("selected")}),t.target.classList.add("selected");for(const o of c.children){o.classList.remove("hidden");const d=o.classList.contains("completed");switch(e){case"Pending":d&&o.classList.add("hidden");break;case"Completed":d||o.classList.add("hidden");break}}}});let a;const T=new Uint8Array(16);function v(){if(!a&&(a=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!a))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return a(T)}const s=[];for(let t=0;t<256;++t)s.push((t+256).toString(16).slice(1));function S(t,e=0){return(s[t[e+0]]+s[t[e+1]]+s[t[e+2]]+s[t[e+3]]+"-"+s[t[e+4]]+s[t[e+5]]+"-"+s[t[e+6]]+s[t[e+7]]+"-"+s[t[e+8]]+s[t[e+9]]+"-"+s[t[e+10]]+s[t[e+11]]+s[t[e+12]]+s[t[e+13]]+s[t[e+14]]+s[t[e+15]]).toLowerCase()}const b=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),p={randomUUID:b};function C(t,e,o){if(p.randomUUID&&!e&&!t)return p.randomUUID();t=t||{};const d=t.random||(t.rng||v)();if(d[6]=d[6]&15|64,d[8]=d[8]&63|128,e){o=o||0;for(let n=0;n<16;++n)e[o+n]=d[n];return e}return S(d)}class u{static fromJson({id:e,task:o,completed:d,createdAt:n}){const l=new u(o);return l.id=e,l.completed=d,l.createdAt=n,l}constructor(e){this.task=e,this.id=C(),this.completed=!1,this.createdAt=new Date}}class E{constructor(){this.loadLocalStorage(),this.countTodo()}addTodo(e){this.todos.push(e),this.saveToLocalStorage(),this.countTodo()}deleteTodo(e){this.todos=this.todos.filter(o=>o.id!==e),this.saveToLocalStorage(),this.countTodo()}toggleTodo(e){for(const o of this.todos)if(o.id===e){o.completed=!o.completed;break}this.saveToLocalStorage(),this.countTodo()}deleteCompleted(){this.todos=this.todos.filter(e=>!e.completed),this.saveToLocalStorage()}saveToLocalStorage(){localStorage.setItem("todo",JSON.stringify(this.todos))}loadLocalStorage(){this.todos=localStorage.getItem("todo")?JSON.parse(localStorage.getItem("todo")):[],this.todos=this.todos.map(u.fromJson)}countTodo(){let e=0,o=L.firstElementChild;for(let d of this.todos)d.completed||e++;o.innerHTML=e}}const i=new E;i.todos.forEach(t=>h(t));
